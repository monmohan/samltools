package samltools

import (
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"testing"
	"time"

	mrand "math/rand"

	"github.com/beevik/etree"
	dsig "github.com/russellhaering/goxmldsig"
)

func TestXMLGen(t *testing.T) {
	req := &AuthnRequest{
		SamlpAttr:       "urn:oasis:names:tc:SAML:2.0:protocol",
		ID:              "123",
		IssueInstant:    time.Now().Format(time.RFC3339),
		ProtocolBinding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
		Version:         "2.0",
		Issuer:          Issuer{Namespace: "urn:oasis:names:tc:SAML:2.0:assertion", Value: "http://msinghlocal.saml.com"},
	}
	output, err := xml.MarshalIndent(req, "  ", "    ")
	if err != nil {
		fmt.Printf("error: %v\n", err)
	}

	os.Stdout.Write(output)
}

func TestValidateSignature(t *testing.T) {
	//Sample Auth0 SAML Assertion
	var resp = ``
	var okta_resp = ``

	//Auth0 Cert
	validationContext, err := CreateValidationContextFromCertFile("./config/dev-ejtl988w.cer")
	if err != nil {
		t.Fatalf("Auth0 Validation Failed Err=%s", err)

	}
	err = ValidateAssertion(resp, validationContext)
	if err != nil {
		t.Fatalf("Auth0 Validation Failed Err=%s", err)

	}
	//Auth0 Cert
	validationContext, err = CreateValidationContextFromCertFile("./config/okta.cert")
	if err != nil {
		t.Fatalf("Okta Validation Failed Err=%s", err)

	}
	err = ValidateAssertion(okta_resp, validationContext)
	if err != nil {
		t.Fatalf("Okta Validation Failed Err=%s", err)

	}
}

func TestCreateAssertion(t *testing.T) {
	mrand.Seed(time.Now().UnixNano())

	//create assertion
	assertionID := fmt.Sprintf("_%d", mrand.Int())
	issueTime := time.Now().Format(time.RFC3339)
	notOnOrAfter := time.Now().Add(2 * time.Hour).Format(time.RFC3339)
	requestId := fmt.Sprintf("_%d", mrand.Int())
	doc := etree.NewDocument()
	asEl := doc.CreateElement("saml:Assertion")
	asEl.CreateAttr("xmlns:saml", "urn:oasis:names:tc:SAML:2.0:assertion")
	asEl.CreateAttr("Version", "2.0")
	asEl.CreateAttr("ID", assertionID)
	asEl.CreateAttr("IssueInstant", issueTime)
	//add Issuer
	asEl.CreateElement("saml:Issuer").CreateText("http://idp.samltools.com")

	addSubject(asEl, requestId, notOnOrAfter, "urn:auth0:dev-ejtl988w:auth0-as-sp")
	addConditions(asEl, notOnOrAfter, "https://dev-ejtl988w.auth0.com/login/callback?connection=auth0-as-sp")
	addAuthStatements(asEl, issueTime)

	attrStmts := asEl.CreateElement("saml:AttributeStatement")
	attrStmts.CreateAttr("xmlns", "http://www.w3.org/2001/XMLSchema")
	attrStmts.CreateAttr("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
	createAttribute(attrStmts, "name", "IDPUser1")
	createAttribute(attrStmts, "email", "dev.null.dump.1@gmail.com")
	createAttribute(attrStmts, "userid", "IDPUser1")

	samlResp := createSAMLResponseElement(asEl, requestId)

	//randomKeyStore := dsig.RandomKeyStoreForTest()
	randomKeyStore := NewIDPKeyStore("./config/idp-samltools-privatekey.key")
	ctx := dsig.NewDefaultSigningContext(randomKeyStore)
	// Sign the element
	signedElement, err := ctx.SignEnveloped(asEl)
	if err != nil {
		panic(err)
	}
	samlResp.AddChild(signedElement)
	// Serialize the signed element. It is important not to modify the element
	// after it has been signed - even pretty-printing the XML will invalidate
	// the signature.
	fdoc := etree.NewDocument()
	fdoc.SetRoot(samlResp)
	fdoc.WriteTo(os.Stdout)

	bytes, err := fdoc.WriteToBytes()
	if err != nil {
		panic(err)
	}
	resp := base64.StdEncoding.EncodeToString(bytes)
	//Build context
	_, certBytes, _ := randomKeyStore.GetKeyPair()
	cert, err := x509.ParseCertificate(certBytes)
	if err != nil {
		panic(err)
	}

	certificateStore := dsig.MemoryX509CertificateStore{
		Roots: []*x509.Certificate{cert},
	}

	validationContext := dsig.NewDefaultValidationContext(&certificateStore)
	validationContext.IdAttribute = "ID"

	err = ValidateAssertion(resp, validationContext)
	if err != nil {
		t.Fatalf("failed to validate signature  %s", err.Error())
	}

}

func signWithPvtkey(hashed []byte) ([]byte, error) {
	pemBlock, _ := ioutil.ReadFile("config/idp-samltools-privatekey.key")
	block, _ := pem.Decode(pemBlock)
	if block == nil {
		panic("failed to parse PEM block containing the private key")
	}

	pvt, err := x509.ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		panic("failed to parse DER encoded public key: " + err.Error())
	}
	key := pvt.(*rsa.PrivateKey)

	return rsa.SignPKCS1v15(rand.Reader, key, crypto.SHA1, hashed)

}

func TestSignature(t *testing.T) {
	message := "this is some message"
	hash := crypto.SHA1.New()
	_, err := hash.Write([]byte(message))
	if err != nil {
		log.Fatalf("failed to create hash  %s", err.Error())
	}

	hashed := hash.Sum(nil)
	signature, err := signWithPvtkey(hashed)
	if err != nil {
		log.Fatalf("failed to create signature  %s", err.Error())
	}
	derBytesCert, err := base64.StdEncoding.DecodeString(Certb64)

	cert, err := x509.ParseCertificate(derBytesCert)
	if err != nil {
		log.Fatalf("x509 parse err %s\n", err.Error())

	}
	err = rsa.VerifyPKCS1v15(cert.PublicKey.(*rsa.PublicKey), crypto.SHA1, hashed, signature)
	if err != nil {
		log.Fatalf("check failed signature err %s\n", err.Error())

	}
}
